{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "contracts/LUBA.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n// this is a LUBA (Lowest Unique Bid Auction).\n\n// it is a simple auction where the lowest unique (or first) bid is the winner.\n\ncontract LUBA {\n  IERC20 public bidToken;\n\n  struct Bid {\n    uint256 amount;\n    address bidder;\n  }\n\n  struct Auction {\n    address creator;\n    uint256 endTime;\n    uint256 biddingUnit; // the smallest amount that can be bid. every bid must be a multiple of this amount.\n    Bid[]bids;\n    mapping(address => uint256[]) bidsByBidder;\n    uint256 totalBidAmount;\n    bool withdrawn;\n  }\n\n  mapping(address => uint256) public userBalances;\n\n  event AuctionCreated(\n    uint256 indexed auctionId,\n    address indexed creator,\n    uint256 endTime,\n    uint256 biddingUnit\n  );\n\n  event BidPlaced(\n    uint256 indexed auctionId,\n    address indexed bidder\n  );\n\n  Auction[] public auctions;\n\n  constructor(address _bidToken) {\n    bidToken = IERC20(_bidToken);\n  }\n\n  function startAuction(uint256 endTime, uint256 biddingUnit) public {\n    require(endTime > block.timestamp, \"End time must be in the future\");\n    require(biddingUnit > 0, \"Bidding unit must be greater than 0\");\n\n    auctions.push();\n    uint256 newAuctionId = auctions.length - 1;\n    Auction storage newAuction = auctions[newAuctionId];\n\n    newAuction.creator = msg.sender;\n    newAuction.endTime = endTime;\n    newAuction.biddingUnit = biddingUnit;\n    newAuction.withdrawn = false;\n\n    emit AuctionCreated(newAuctionId, msg.sender, endTime, biddingUnit);\n  }\n\n  function endAuction(uint256 auctionId) public {\n    require(msg.sender == auctions[auctionId].creator, \"Only auction creator can end it\");\n\n    auctions[auctionId].endTime = block.timestamp;\n  }\n\n  function placeBid(uint256 auctionId, uint256 multiplier) public {\n    require(auctions[auctionId].endTime > block.timestamp, \"Auction has ended or not existing\");\n    uint256 amount = multiplier * auctions[auctionId].biddingUnit;\n\n    Auction storage auction = auctions[auctionId];\n\n    // Update total bid amount\n    auction.totalBidAmount += amount;\n\n    // store always any valid bid\n    auction.bids.push(Bid(amount, msg.sender));\n\n    auction.bidsByBidder[msg.sender].push(auction.bids.length - 1); // store the index of the bid\n\n    emit BidPlaced(auctionId, msg.sender);\n  }\n\n  function readYourBids(uint256 auctionId) public view returns (Bid[] memory) {\n    uint256[] memory bidIds = auctions[auctionId].bidsByBidder[msg.sender];\n\n    Bid[] memory bids = new Bid[](bidIds.length);\n    for (uint256 i = 0; i < bidIds.length; i++) {\n      bids[i] = auctions[auctionId].bids[bidIds[i]];\n    }\n    return bids;\n  }\n\n  function revealBids(uint256 auctionId) public view returns (Bid[] memory) {\n    require(auctions[auctionId].endTime < block.timestamp, \"Auction has not ended yet\");\n\n    return auctions[auctionId].bids;\n  }\n\n  // New function to withdraw tokens after auction ends\n  function withdrawBidPool(uint256 auctionId) public {\n    Auction storage auction = auctions[auctionId];\n    require(msg.sender == auction.creator, \"Only auction creator can withdraw\");\n    require(auction.endTime < block.timestamp, \"Auction has not ended yet\");\n    require(!auction.withdrawn, \"Tokens already withdrawn\");\n\n    auction.withdrawn = true;\n    require(bidToken.transfer(auction.creator, auction.totalBidAmount), \"Token transfer failed\");\n  }\n\n  function addBalance(uint256 amount) public {\n    require(amount > 0, \"Amount must be greater than 0\");\n    bidToken.transferFrom(msg.sender, address(this), amount);\n\n    userBalances[msg.sender] += amount;\n  }\n\n  function withdrawBalance() public {\n    require(userBalances[msg.sender] > 0, \"No balance to withdraw\");\n\n    bidToken.transfer(msg.sender, userBalances[msg.sender]);\n    userBalances[msg.sender] = 0;\n  }\n\n  function getPersonalBalance() public view returns (uint256) {\n    return userBalances[msg.sender];\n  }\n\n  function auctionsLength() public view returns (uint256) {\n    return auctions.length;\n  }\n\n  function getPublicAuctionData(uint256 auctionId) public view returns (\n    uint256 endTime,\n    uint256 biddingUnit,\n    uint256 bidsCount,\n    address creator\n  ) {\n    Auction storage auction = auctions[auctionId];\n\n    return (auction.endTime, auction.biddingUnit, auction.bids.length, auction.creator);\n  }\n\n  function getCreatorAuctionData(uint256 auctionId) public view returns (\n    uint256 totalBidAmount,\n    uint256 numberOfBids,\n    bool withdrawn\n  ) {\n    require(msg.sender == auctions[auctionId].creator, \"Only auction creator can access this data\");\n\n    Auction storage auction = auctions[auctionId];\n\n    return (auction.totalBidAmount, auction.bids.length, auction.withdrawn);\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}